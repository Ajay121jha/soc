-- Table: users
 CREATE TABLE `users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(50) NOT NULL,
  `password` varchar(255) NOT NULL,
  `role` varchar(50) NOT NULL DEFAULT 'analyst',
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
);



-- Table: shift_assignments
CREATE TABLE `shift_assignments` (
  `id` int NOT NULL AUTO_INCREMENT,
  `date` date NOT NULL,
  `shift_type` enum('morning','evening','night') NOT NULL,
  `start_time` time NOT NULL,
  `end_time` time NOT NULL,
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
);



-- Table: shift_employee_map
CREATE TABLE `shift_employee_map` (
  `id` int NOT NULL AUTO_INCREMENT,
  `shift_id` int NOT NULL,
  `employee_id` int NOT NULL,
  `cab_facility` enum('Yes','No') DEFAULT 'No',
  PRIMARY KEY (`id`),
  KEY `shift_id` (`shift_id`),
  KEY `employee_id` (`employee_id`),
  FOREIGN KEY (`shift_id`) REFERENCES `shift_assignments` (`id`),
  FOREIGN KEY (`employee_id`) REFERENCES `users` (`id`)
);



-- Table: handover_notes
CREATE TABLE `handover_notes` (
  `id` int NOT NULL AUTO_INCREMENT,
  `shift_id` int NOT NULL,
  `employee_id` int NOT NULL,
  `note` text NOT NULL,
  `created_at` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `shift_id` (`shift_id`),
  KEY `employee_id` (`employee_id`),
  FOREIGN KEY (`shift_id`) REFERENCES `shift_assignments` (`id`),
  FOREIGN KEY (`employee_id`) REFERENCES `users` (`id`)
);



-- Table: knowledge_base
CREATE TABLE `knowledge_base` (
  `id` int NOT NULL AUTO_INCREMENT,
  `entity_name` varchar(255) DEFAULT NULL,
  `asset` varchar(255) DEFAULT NULL,
  `itsm_ref` varchar(100) DEFAULT NULL,
  `asset_details` text,
  `status` enum('Blocked','Allowed') DEFAULT NULL,
  `reason` text,
  `context` text,
  `remarks` text,
  PRIMARY KEY (`id`)
);




--Table: clients
 CREATE TABLE `clients` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
);



--Table client_assets
CREATE TABLE `client_assets` (
  `id` int NOT NULL AUTO_INCREMENT,
  `client_id` int NOT NULL,
  `asset_name` varchar(100) DEFAULT NULL,
  `location` varchar(100) DEFAULT NULL,
  `ip_address` varchar(45) DEFAULT NULL,
  `mode` enum('RDP','SSH') DEFAULT NULL,
  `asset_type` varchar(100) DEFAULT NULL,
  `asset_owner` varchar(100) DEFAULT NULL,
  `remarks` text,
  PRIMARY KEY (`id`),
  KEY `client_id` (`client_id`),
  FOREIGN KEY (`client_id`) REFERENCES `clients` (`id`)
);


--Table escalation_matrix
CREATE TABLE `escalation_matrix` (
  `id` int NOT NULL AUTO_INCREMENT,
  `client_id` int NOT NULL,
  `level` varchar(50) NOT NULL,
  `contact_name` varchar(100) NOT NULL,
  `contact_email` varchar(100) DEFAULT NULL,
  `contact_number` varchar(20) DEFAULT NULL,
  `sla_response_hours` decimal(5,2) NOT NULL,
  `sla_resolution_hours` decimal(5,2) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `client_id` (`client_id`),
  FOREIGN KEY (`client_id`) REFERENCES `clients` (`id`)
);

--Table clusters
CREATE TABLE `clusters` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(100) NOT NULL,
  `cluster` int NOT NULL,
  PRIMARY KEY (`id`)
);







Suggestions to Improve the Escalation Matrix
1. Add Contact Roles and Tags
Instead of just L1, L2, L3, allow tagging contacts with roles like:
Security Lead
Infrastructure Manager
Compliance Officer
This helps in filtering and targeting advisories better.
2. Group Contacts by Department or Region
If your clients are large organizations:
Add fields like department, region, or location.
Filter escalation contacts based on these fields.
3. Support Multiple Contacts per Level with Priority
Allow assigning multiple contacts per level with a priority order:
 
4. Add Contact Validation and Status
Show if the email is verified or bounced.
Add a status like active, inactive, or pending.
5. Audit Trail for Changes
Log who added/removed a contact and when. This helps in compliance and debugging.
6. Bulk Import/Export Contacts
Allow CSV upload/download for escalation contacts:
Useful for onboarding large clients.
Can be integrated with Excel or Google Sheets.
7. Escalation Rules Engine
Define rules like:
‚ÄúIf advisory is urgent, notify L1 and L2.‚Äù
‚ÄúIf advisory is informational, notify only L3.‚Äù
This can be a JSON-based config or UI-driven.
8. Email Preview Enhancements
Add rich formatting (HTML preview).
Allow custom CC/BCC.
Support scheduling emails (e.g., send at 9 AM next day).
9. Contact Notes and History
Allow adding notes per contact:
‚ÄúThis contact prefers advisories only on Fridays.‚Äù
Also show history of advisories sent to each contact.
üß© UI/UX Enhancements
Search and Filter Contacts: Add a search bar to quickly find contacts.
Inline Editing: Allow editing email or level directly in the list.
Confirmation Modals: Add confirmation before deleting contacts.
üõ† Backend Suggestions
Use a normalized table like:
 
Add API endpoints for:
Bulk import/export
Role-based filtering
Audit logs







ALTER TABLE client_tech_contacts
ADD COLUMN level VARCHAR(10) NOT NULL DEFAULT 'L1',
ADD COLUMN role VARCHAR(255) DEFAULT 'Not Assigned',
ADD COLUMN department VARCHAR(255) DEFAULT 'General',
ADD COLUMN location VARCHAR(255) DEFAULT 'Headquarters',
ADD COLUMN priority INT DEFAULT 1,
ADD COLUMN tags TEXT;









